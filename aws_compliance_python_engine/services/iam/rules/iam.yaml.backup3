version: 1
provider: aws
service: iam
discovery:
  -
    discovery_id: iam_users
    calls:
      -
        client: iam
        action: list_users
        paginate: true
        params: {}
        fields:
          - "Users[].UserName"
          - "Users[].UserId"
          - "Users[].Arn"
          - "Users[].CreateDate"
          - "Users[].Path"
        save_as: users
      -
        for_each: "{{ users }}"
        as: u
        client: iam
        action: get_login_profile
        paginate: false
        params:
          UserName: "{{ u.UserName }}"
        on_error: continue
        fields:
          - "LoginProfile.CreateDate"
        save_as: "login_profiles.{{ u.UserName }}"
      -
        for_each: "{{ users }}"
        as: u
        client: iam
        action: list_mfa_devices
        paginate: true
        params:
          UserName: "{{ u.UserName }}"
        fields:
          - "MFADevices[].SerialNumber"
          - "MFADevices[].EnableDate"
        save_as: "mfa.{{ u.UserName }}"
      -
        for_each: "{{ users }}"
        as: u
        client: iam
        action: get_user
        paginate: false
        params:
          UserName: "{{ u.UserName }}"
        fields:
          - "User.UserName"
          - "User.CreateDate"
          - "User.PasswordLastUsed"
          - "User.Tags"
          - "User.PermissionsBoundary.PermissionsBoundaryArn"
        save_as: "user_details.{{ u.UserName }}"
      -
        for_each: "{{ users }}"
        as: u
        client: iam
        action: list_access_keys
        paginate: false
        params:
          UserName: "{{ u.UserName }}"
        fields:
          - "AccessKeyMetadata[].AccessKeyId"
          - "AccessKeyMetadata[].CreateDate"
          - "AccessKeyMetadata[].Status"
        save_as: "access_keys.{{ u.UserName }}"
      -
        for_each: "{{ users }}"
        as: u
        client: iam
        action: list_attached_user_policies
        paginate: true
        params:
          UserName: "{{ u.UserName }}"
        fields:
          - "AttachedPolicies[].PolicyArn"
          - "AttachedPolicies[].PolicyName"
        save_as: "attached_policies.{{ u.UserName }}"
      -
        for_each: "{{ users }}"
        as: u
        client: iam
        action: list_user_policies
        paginate: true
        params:
          UserName: "{{ u.UserName }}"
        fields:
          - "PolicyNames[]"
        save_as: "inline_policies.{{ u.UserName }}"
    emit:
      items_for: "{{ users }}"
      as: u
      item:
        user_name: "{{ u.UserName }}"
        user_id: "{{ u.UserId }}"
        user_arn: "{{ u.Arn }}"
        create_date: "{{ u.CreateDate }}"
        path: "{{ u.Path }}"
        password_last_used: "{{ user_details[u.UserName].User.PasswordLastUsed }}"
        user_tags: "{{ user_details[u.UserName].User.Tags }}"
        is_console_user: "{{ exists(login_profiles[u.UserName].LoginProfile.CreateDate) }}"
        mfa_devices: "{{ mfa[u.UserName].MFADevices[].SerialNumber }}"
        mfa_enable_date: "{{ mfa[u.UserName].MFADevices[].EnableDate }}"
        user_permissions_boundary: "{{ user_details[u.UserName].User.PermissionsBoundary.PermissionsBoundaryArn }}"
        access_keys: "{{ access_keys[u.UserName].AccessKeyMetadata[] }}"
        attached_policies: "{{ attached_policies[u.UserName].AttachedPolicies[].PolicyArn }}"
        inline_policies: "{{ inline_policies[u.UserName].PolicyNames[] }}"
  -
    discovery_id: iam_account
    calls:
      -
        client: iam
        action: get_account_summary
        paginate: false
        params: {}
        fields:
          - "SummaryMap"
      -
        client: iam
        action: get_account_password_policy
        paginate: false
        params: {}
        on_error: continue
        fields:
          - "PasswordPolicy"
    emit:
      item:
        account_summary: "{{SummaryMap}}"
        password_policy: "{{PasswordPolicy}}"
  -
    discovery_id: iam_roles
    calls:
      -
        client: iam
        action: list_roles
        paginate: true
        params: {}
        fields:
          - "Roles[].RoleName"
          - "Roles[].Arn"
          - "Roles[].MaxSessionDuration"
          - "Roles[].PermissionsBoundary.PermissionsBoundaryArn"
          - "Roles[].CreateDate"
          - "Roles[].Path"
          - "Roles[].LastUsedDate"
      -
        for_each: "{{ Roles[] }}"
        as: r
        client: iam
        action: list_attached_role_policies
        paginate: true
        params:
          RoleName: "{{ r.RoleName }}"
        fields:
          - "AttachedPolicies[].PolicyArn"
          - "AttachedPolicies[].PolicyName"
        save_as: "role_attached_policies.{{ r.RoleName }}"
      -
        for_each: "{{ Roles[] }}"
        as: r
        client: iam
        action: list_role_policies
        paginate: true
        params:
          RoleName: "{{ r.RoleName }}"
        fields:
          - "PolicyNames[]"
        save_as: "role_inline_policies.{{ r.RoleName }}"
    emit:
      items_for: "{{ Roles[] }}"
      as: r
      item:
        role_name: "{{ r.RoleName }}"
        role_arn: "{{ r.Arn }}"
        max_session_duration: "{{ r.MaxSessionDuration }}"
        permissions_boundary_arn: "{{ r.PermissionsBoundary.PermissionsBoundaryArn }}"
        role_create_date: "{{ r.CreateDate }}"
        role_path: "{{ r.Path }}"
        role_last_used: "{{ r.LastUsedDate }}"
        role_attached_policies: "{{ role_attached_policies[r.RoleName].AttachedPolicies[].PolicyArn }}"
        role_inline_policies: "{{ role_inline_policies[r.RoleName].PolicyNames[] }}"
  -
    discovery_id: iam_policies
    calls:
      -
        client: iam
        action: list_policies
        paginate: true
        params:
          Scope: Local
        fields:
          - "Policies[].Arn"
          - "Policies[].PolicyName"
          - "Policies[].AttachmentCount"
          - "Policies[].CreateDate"
      -
        client: organizations
        action: list_policies
        paginate: true
        params:
          Filter: SERVICE_CONTROL_POLICY
        fields:
          - "Policies[].Id"
          - "Policies[].Name"
    emit:
      item:
        customer_managed_policy_arns: "{{Policies[].Arn}}"
        policy_names: "{{Policies[].PolicyName}}"
        policy_attachment_count: "{{Policies[].AttachmentCount}}"
        scp_ids: "{{Policies[].Id}}"
        scp_names: "{{Policies[].Name}}"
  -
    discovery_id: iam_groups
    calls:
      -
        client: iam
        action: list_groups
        paginate: true
        params: {}
        fields:
          - "Groups[].GroupName"
          - "Groups[].GroupId"
          - "Groups[].Arn"
          - "Groups[].CreateDate"
          - "Groups[].Path"
      -
        for_each: "{{ Groups[] }}"
        as: g
        client: iam
        action: list_attached_group_policies
        paginate: true
        params:
          GroupName: "{{ g.GroupName }}"
        fields:
          - "AttachedPolicies[].PolicyArn"
          - "AttachedPolicies[].PolicyName"
        save_as: "group_attached_policies.{{ g.GroupName }}"
      -
        for_each: "{{ Groups[] }}"
        as: g
        client: iam
        action: list_group_policies
        paginate: true
        params:
          GroupName: "{{ g.GroupName }}"
        fields:
          - "PolicyNames[]"
        save_as: "group_inline_policies.{{ g.GroupName }}"
    emit:
      items_for: "{{ Groups[] }}"
      as: g
      item:
        group_name: "{{ g.GroupName }}"
        group_id: "{{ g.GroupId }}"
        group_arn: "{{ g.Arn }}"
        group_create_date: "{{ g.CreateDate }}"
        group_path: "{{ g.Path }}"
        group_attached_policies: "{{ group_attached_policies[g.GroupName].AttachedPolicies[].PolicyArn }}"
        group_inline_policies: "{{ group_inline_policies[g.GroupName].PolicyNames[] }}"
  -
    discovery_id: iam_providers
    calls:
      -
        client: iam
        action: list_saml_providers
        paginate: false
        params: {}
        fields:
          - "SAMLProviderList[].Arn"
          - "SAMLProviderList[].ValidUntil"
          - "SAMLProviderList[].CreateDate"
      -
        client: iam
        action: list_open_id_connect_providers
        paginate: false
        params: {}
        fields:
          - "OpenIDConnectProviderList[].Arn"
          - "OpenIDConnectProviderList[].CreateDate"
    emit:
      item:
        saml_provider_arns: "{{SAMLProviderList[].Arn}}"
        saml_provider_valid_until: "{{SAMLProviderList[].ValidUntil}}"
        saml_provider_create_date: "{{SAMLProviderList[].CreateDate}}"
        oidc_provider_arns: "{{OpenIDConnectProviderList[].Arn}}"
        oidc_provider_create_date: "{{OpenIDConnectProviderList[].CreateDate}}"
checks:
  -
    title: "MFA is enabled for all console IAM users"
    severity: high
    rule_id: aws.iam.user_mfa_status.strong_authn_enabled
    assertion_id: identity_access.authentication.strong_authn_enabled
    for_each: iam_users
    conditions:
      all:
        - var: item.is_console_user
          op: equals
          value: true
        - var: item.mfa_devices
          op: length_gte
          value: 1
  -
    title: "Root account has MFA enabled and no access keys"
    severity: critical
    rule_id: aws.iam.root_account_status.strong_authn_enabled
    assertion_id: identity_access.authentication.strong_authn_enabled
    for_each: iam_account
    conditions:
      all:
        - var: item.account_summary.AccountMFAEnabled
          op: equals
          value: 1
        - var: item.account_summary.AccountAccessKeysPresent
          op: equals
          value: 0
  -
    title: "STS session duration is limited for IAM roles"
    severity: medium
    rule_id: aws.iam.session_duration.session_duration_limited
    assertion_id: rbac_entitlements.entitlement_mgmt.session_duration_limited
    for_each: iam_roles
    params:
      max_session_duration_minutes: 360
    conditions:
      all:
        - var: item.max_session_duration
          op: lte
          value: "{{ params.max_session_duration_minutes }}"
  -
    title: "Permission boundaries are attached to privileged roles"
    severity: high
    rule_id: aws.iam.role_policies.permission_boundaries_enforced
    assertion_id: rbac_entitlements.least_priv.permission_boundaries_enforced
    for_each: iam_roles
    conditions:
      all:
        - var: item.permissions_boundary_arn
          op: exists
  -
    title: "Password policy requires minimum length of 14 characters"
    severity: medium
    rule_id: aws.iam.password_policy.minimum_length
    assertion_id: identity_access.authentication.password_strength
    for_each: iam_account
    conditions:
      all:
        - var: item.password_policy.MinimumPasswordLength
          op: exists
        - var: item.password_policy.MinimumPasswordLength
          op: gte
          value: 14
  -
    title: "Password policy requires complexity (symbols, numbers, case)"
    severity: medium
    rule_id: aws.iam.password_policy.complexity_required
    assertion_id: identity_access.authentication.password_strength
    for_each: iam_account
    conditions:
      all:
        - var: item.password_policy.RequireSymbols
          op: exists
        - var: item.password_policy.RequireNumbers
          op: exists
        - var: item.password_policy.RequireUppercaseCharacters
          op: exists
        - var: item.password_policy.RequireLowercaseCharacters
          op: exists
        - var: item.password_policy.RequireSymbols
          op: equals
          value: true
        - var: item.password_policy.RequireNumbers
          op: equals
          value: true
        - var: item.password_policy.RequireUppercaseCharacters
          op: equals
          value: true
        - var: item.password_policy.RequireLowercaseCharacters
          op: equals
          value: true
  -
    title: "Password policy enforces maximum age of 90 days"
    severity: medium
    rule_id: aws.iam.password_policy.max_age
    assertion_id: identity_access.authentication.password_strength
    for_each: iam_account
    conditions:
      all:
        - var: item.password_policy.MaxPasswordAge
          op: exists
        - var: item.password_policy.MaxPasswordAge
          op: lte
          value: 90
  -
    title: "Access keys exist and are active"
    severity: high
    rule_id: aws.iam.access_keys.rotation_enabled
    assertion_id: identity_access.authentication.credential_rotation
    for_each: iam_users
    conditions:
      all:
        - var: item.access_keys
          op: exists
        - var: item.access_keys
          op: length_gte
          value: 1
  -
    title: "No unused access keys exist"
    severity: medium
    rule_id: aws.iam.access_keys.unused_keys_removed
    assertion_id: identity_access.authentication.credential_cleanup
    for_each: iam_users
    conditions:
      all:
        - var: item.access_keys
          op: exists
        - var: item.access_keys
          op: length_gte
          value: 1
  -
    title: "IAM users have been used recently"
    severity: medium
    rule_id: aws.iam.users.unused_users_removed
    assertion_id: identity_access.authentication.credential_cleanup
    for_each: iam_users
    conditions:
      all:
        - var: item.password_last_used
          op: exists
  -
    title: "IAM roles have been used recently"
    severity: medium
    rule_id: aws.iam.roles.unused_roles_removed
    assertion_id: identity_access.authentication.credential_cleanup
    for_each: iam_roles
    conditions:
      all:
        - var: item.role_last_used
          op: exists
  -
    title: "No inline policies are attached to users"
    severity: medium
    rule_id: aws.iam.inline_policies.least_privilege_roles
    assertion_id: rbac_entitlements.least_priv.managed_policies_preferred
    for_each: iam_users
    conditions:
      all:
        - var: item.inline_policies
          op: exists
        - var: item.inline_policies
          op: length_gte
          value: 0
  -
    title: "No inline policies are attached to roles"
    severity: medium
    rule_id: aws.iam.role_policies.least_privilege_roles
    assertion_id: rbac_entitlements.least_priv.managed_policies_preferred
    for_each: iam_roles
    conditions:
      all:
        - var: item.role_inline_policies
          op: exists
        - var: item.role_inline_policies
          op: length_gte
          value: 0
  -
    title: "Users do not have excessive admin permissions"
    severity: high
    rule_id: aws.iam.role_definitions.least_privilege_roles
    assertion_id: rbac_entitlements.least_priv.least_privilege_enforced
    for_each: iam_users
    conditions:
      all:
        - var: item.attached_policies
          op: exists
        - var: item.attached_policies
          op: length_gte
          value: 1
        - var: item.attached_policies
          op: not_contains
          value: "arn:aws:iam::aws:policy/AdministratorAccess"
  -
    title: "Roles do not have excessive admin permissions"
    severity: high
    rule_id: aws.iam.custom_policies.least_privilege_roles
    assertion_id: rbac_entitlements.least_priv.least_privilege_enforced
    for_each: iam_roles
    conditions:
      all:
        - var: item.role_attached_policies
          op: exists
        - var: item.role_attached_policies
          op: length_gte
          value: 1
        - var: item.role_attached_policies
          op: not_contains
          value: "arn:aws:iam::aws:policy/AdministratorAccess"
  -
    title: "Password policy prevents reuse of last 5 passwords"
    severity: medium
    rule_id: aws.iam.password_policy.password_reuse_prevention
    assertion_id: identity_access.authentication.password_strength
    for_each: iam_account
    conditions:
      all:
        - var: item.password_policy.PasswordReusePrevention
          op: exists
        - var: item.password_policy.PasswordReusePrevention
          op: gte
          value: 5
  -
    title: "Service authentication is configured for IAM users"
    severity: high
    rule_id: aws.iam.user_mfa_status.service_authn_configured
    assertion_id: identity_access.authentication.service_authn_configured
    for_each: iam_users
    conditions:
      all:
        - var: item.is_console_user
          op: equals
          value: true
        - var: item.mfa_devices
          op: length_gte
          value: 1
  -
    title: "Legacy authentication protocols are disabled for users"
    severity: medium
    rule_id: aws.iam.user_mfa_status.legacy_authn_disabled
    assertion_id: identity_access.authentication.legacy_authn_disabled
    for_each: iam_users
    conditions:
      all:
        - var: item.password_last_used
          op: exists
        - var: item.access_keys
          op: length_gte
          value: 0
  -
    title: "Access reviews are conducted for least privilege analysis"
    severity: medium
    rule_id: aws.iam.least_privilege_analysis.access_reviews_conducted
    assertion_id: rbac_entitlements.least_priv.access_reviews_conducted
    for_each: iam_users
    conditions:
      all:
        - var: item.attached_policies
          op: exists
        - var: item.attached_policies
          op: length_gte
          value: 0
  -
    title: "Unused permissions are removed from IAM policies"
    severity: medium
    rule_id: aws.iam.least_privilege_analysis.unused_permissions_removed
    assertion_id: rbac_entitlements.least_priv.unused_permissions_removed
    for_each: iam_users
    conditions:
      all:
        - var: item.attached_policies
          op: exists
        - var: item.attached_policies
          op: not_contains
          value: "arn:aws:iam::aws:policy/AdministratorAccess"
  -
    title: "Root account service authentication is configured"
    severity: critical
    rule_id: aws.iam.root_account_status.service_authn_configured
    assertion_id: identity_access.authentication.service_authn_configured
    for_each: iam_account
    conditions:
      all:
        - var: item.account_summary.AccountMFAEnabled
          op: equals
          value: 1
  -
    title: "Root account legacy authentication is disabled"
    severity: critical
    rule_id: aws.iam.root_account_status.legacy_authn_disabled
    assertion_id: identity_access.authentication.legacy_authn_disabled
    for_each: iam_account
    conditions:
      all:
        - var: item.account_summary.AccountAccessKeysPresent
          op: equals
          value: 0
  -
    title: "Root account session timeout is configured"
    severity: high
    rule_id: aws.iam.root_account_status.session_timeout_configured
    assertion_id: identity_access.authentication.session_timeout_configured
    for_each: iam_account
    conditions:
      all:
        - var: item.account_summary.AccountMFAEnabled
          op: equals
          value: 1
  -
    title: "User session timeout is configured"
    severity: medium
    rule_id: aws.iam.user_mfa_status.session_timeout_configured
    assertion_id: identity_access.authentication.session_timeout_configured
    for_each: iam_users
    conditions:
      all:
        - var: item.is_console_user
          op: equals
          value: true
        - var: item.mfa_devices
          op: length_gte
          value: 1
  -
    title: "MFA is enforced for privileged users"
    severity: high
    rule_id: aws.iam.mfa.enforced_for_privileged_users
    assertion_id: identity_access.authentication.strong_authn_enabled
    for_each: iam_users
    conditions:
      all:
        - var: item.attached_policies
          op: contains
          value: "AdministratorAccess"
        - var: item.mfa_devices
          op: length_gte
          value: 1
  -
    title: "MFA backup methods are configured"
    severity: medium
    rule_id: aws.iam.mfa.backup_methods_configured
    assertion_id: identity_access.authentication.strong_authn_enabled
    for_each: iam_users
    conditions:
      all:
        - var: item.is_console_user
          op: equals
          value: true
        - var: item.mfa_devices
          op: length_gte
          value: 2
  -
    title: "Service linked roles are used appropriately"
    severity: medium
    rule_id: aws.iam.service_linked_roles.service_linked_roles_used
    assertion_id: rbac_entitlements.least_priv.service_linked_roles_used
    for_each: iam_roles
    conditions:
      all:
        - var: item.role_path
          op: contains
          value: "aws-service-role"
        - var: item.role_attached_policies
          op: exists
  -
    title: "Role policies have conditional access enabled"
    severity: medium
    rule_id: aws.iam.role_policies.conditional_access_enabled
    assertion_id: identity_access.authorization.conditional_access_enabled
    for_each: iam_roles
    conditions:
      all:
        - var: item.role_attached_policies
          op: exists
        - var: item.role_attached_policies
          op: length_gte
          value: 0
  -
    title: "Role policies have resource policies configured"
    severity: medium
    rule_id: aws.iam.role_policies.resource_policies_configured
    assertion_id: identity_access.authorization.resource_policies_configured
    for_each: iam_roles
    conditions:
      all:
        - var: item.role_attached_policies
          op: exists
        - var: item.role_attached_policies
          op: length_gte
          value: 0
  -
    title: "Role assignments have principals limited"
    severity: high
    rule_id: aws.iam.role_assignments.principals_limited
    assertion_id: rbac_entitlements.least_priv.principals_limited
    for_each: iam_roles
    conditions:
      all:
        - var: item.role_path
          op: exists
        - var: item.role_attached_policies
          op: not_contains
          value: "arn:aws:iam::aws:policy/AdministratorAccess"
  -
    title: "Role assignments have just-in-time access enabled"
    severity: medium
    rule_id: aws.iam.role_assignments.just_in_time_access_enabled
    assertion_id: rbac_entitlements.least_priv.just_in_time_access_enabled
    for_each: iam_roles
    conditions:
      all:
        - var: item.role_last_used
          op: exists
        - var: item.role_attached_policies
          op: exists
  -
    title: "Role definitions use service linked roles appropriately"
    severity: medium
    rule_id: aws.iam.role_definitions.service_linked_roles_used
    assertion_id: rbac_entitlements.least_priv.service_linked_roles_used
    for_each: iam_roles
    conditions:
      all:
        - var: item.role_path
          op: contains
          value: "aws-service-role"
        - var: item.role_attached_policies
          op: exists
  -
    title: "Role permissions have lifecycle managed"
    severity: medium
    rule_id: aws.iam.role_permissions.lifecycle_managed
    assertion_id: rbac_entitlements.entitlement_mgmt.lifecycle_managed
    for_each: iam_roles
    conditions:
      all:
        - var: item.role_attached_policies
          op: exists
        - var: item.role_attached_policies
          op: length_gte
          value: 0
  -
    title: "Role permissions have temporary access controlled"
    severity: medium
    rule_id: aws.iam.role_permissions.temporary_access_controlled
    assertion_id: rbac_entitlements.entitlement_mgmt.temporary_access_controlled
    for_each: iam_roles
    conditions:
      all:
        - var: item.max_session_duration
          op: exists
        - var: item.max_session_duration
          op: lte
          value: 3600
  -
    title: "Group memberships have principals limited"
    severity: high
    rule_id: aws.iam.group_memberships.principals_limited
    assertion_id: rbac_entitlements.least_priv.principals_limited
    for_each: iam_groups
    conditions:
      all:
        - var: item.group_attached_policies
          op: exists
        - var: item.group_attached_policies
          op: not_contains
          value: "arn:aws:iam::aws:policy/AdministratorAccess"
  -
    title: "Group memberships have just-in-time access enabled"
    severity: medium
    rule_id: aws.iam.group_memberships.just_in_time_access_enabled
    assertion_id: rbac_entitlements.least_priv.just_in_time_access_enabled
    for_each: iam_groups
    conditions:
      all:
        - var: item.group_attached_policies
          op: exists
        - var: item.group_attached_policies
          op: length_gte
          value: 0
  -
    title: "SAML providers have external IDP configured"
    severity: high
    rule_id: aws.iam.saml_providers.external_idp_configured
    assertion_id: identity_access.federation.external_idp_configured
    for_each: iam_providers
    conditions:
      all:
        - var: item.saml_provider_arns
          op: exists
        - var: item.saml_provider_arns
          op: length_gte
          value: 0
  -
    title: "SAML providers have trust relationships managed"
    severity: medium
    rule_id: aws.iam.saml_providers.trust_relationships_managed
    assertion_id: identity_access.federation.trust_relationships_managed
    for_each: iam_providers
    conditions:
      all:
        - var: item.saml_provider_valid_until
          op: exists
        - var: item.saml_provider_create_date
          op: exists
  -
    title: "SAML providers have cross-account access controlled"
    severity: high
    rule_id: aws.iam.saml_providers.cross_account_access_controlled
    assertion_id: identity_access.federation.cross_account_access_controlled
    for_each: iam_providers
    conditions:
      all:
        - var: item.saml_provider_arns
          op: exists
        - var: item.saml_provider_arns
          op: length_gte
          value: 0
  -
    title: "OIDC providers have external IDP configured"
    severity: high
    rule_id: aws.iam.oidc_providers.external_idp_configured
    assertion_id: identity_access.federation.external_idp_configured
    for_each: iam_providers
    conditions:
      all:
        - var: item.oidc_provider_arns
          op: exists
        - var: item.oidc_provider_arns
          op: length_gte
          value: 0
  -
    title: "OIDC providers have trust relationships managed"
    severity: medium
    rule_id: aws.iam.oidc_providers.trust_relationships_managed
    assertion_id: identity_access.federation.trust_relationships_managed
    for_each: iam_providers
    conditions:
      all:
        - var: item.oidc_provider_create_date
          op: exists
        - var: item.oidc_provider_arns
          op: exists
  -
    title: "OIDC providers have cross-account access controlled"
    severity: high
    rule_id: aws.iam.oidc_providers.cross_account_access_controlled
    assertion_id: identity_access.federation.cross_account_access_controlled
    for_each: iam_providers
    conditions:
      all:
        - var: item.oidc_provider_arns
          op: exists
        - var: item.oidc_provider_arns
          op: length_gte
          value: 0
  -
    title: "Inline policies have conditional access enabled"
    severity: medium
    rule_id: aws.iam.inline_policies.conditional_access_enabled
    assertion_id: identity_access.authorization.conditional_access_enabled
    for_each: iam_users
    conditions:
      all:
        - var: item.inline_policies
          op: exists
        - var: item.inline_policies
          op: length_gte
          value: 0
  -
    title: "Inline policies have permission boundaries enforced"
    severity: high
    rule_id: aws.iam.inline_policies.permission_boundaries_enforced
    assertion_id: rbac_entitlements.least_priv.permission_boundaries_enforced
    for_each: iam_users
    conditions:
      all:
        - var: item.user_permissions_boundary
          op: exists
        - var: item.inline_policies
          op: length_gte
          value: 0
  -
    title: "Inline policies have resource policies configured"
    severity: medium
    rule_id: aws.iam.inline_policies.resource_policies_configured
    assertion_id: identity_access.authorization.resource_policies_configured
    for_each: iam_users
    conditions:
      all:
        - var: item.inline_policies
          op: exists
        - var: item.inline_policies
          op: length_gte
          value: 0
  -
    title: "Managed policies have conditional access enabled"
    severity: medium
    rule_id: aws.iam.managed_policies.conditional_access_enabled
    assertion_id: identity_access.authorization.conditional_access_enabled
    for_each: iam_users
    conditions:
      all:
        - var: item.attached_policies
          op: exists
        - var: item.attached_policies
          op: length_gte
          value: 0
  -
    title: "Managed policies have permission boundaries enforced"
    severity: high
    rule_id: aws.iam.managed_policies.permission_boundaries_enforced
    assertion_id: rbac_entitlements.least_priv.permission_boundaries_enforced
    for_each: iam_users
    conditions:
      all:
        - var: item.user_permissions_boundary
          op: exists
        - var: item.attached_policies
          op: length_gte
          value: 0
  -
    title: "Managed policies have resource policies configured"
    severity: medium
    rule_id: aws.iam.managed_policies.resource_policies_configured
    assertion_id: identity_access.authorization.resource_policies_configured
    for_each: iam_users
    conditions:
      all:
        - var: item.attached_policies
          op: exists
        - var: item.attached_policies
          op: length_gte
          value: 0
  -
    title: "Permission boundaries have access reviews conducted"
    severity: medium
    rule_id: aws.iam.permission_boundaries.access_reviews_conducted
    assertion_id: rbac_entitlements.least_priv.access_reviews_conducted
    for_each: iam_users
    conditions:
      all:
        - var: item.user_permissions_boundary
          op: exists
        - var: item.attached_policies
          op: exists
  -
    title: "Permission boundaries have conditional access enabled"
    severity: medium
    rule_id: aws.iam.permission_boundaries.conditional_access_enabled
    assertion_id: identity_access.authorization.conditional_access_enabled
    for_each: iam_users
    conditions:
      all:
        - var: item.user_permissions_boundary
          op: exists
        - var: item.attached_policies
          op: exists
  -
    title: "Permission boundaries have permission boundaries enforced"
    severity: high
    rule_id: aws.iam.permission_boundaries.permission_boundaries_enforced
    assertion_id: rbac_entitlements.least_priv.permission_boundaries_enforced
    for_each: iam_users
    conditions:
      all:
        - var: item.user_permissions_boundary
          op: exists
        - var: item.user_permissions_boundary
          op: length_gte
          value: 1
  -
    title: "Permission boundaries have resource policies configured"
    severity: medium
    rule_id: aws.iam.permission_boundaries.resource_policies_configured
    assertion_id: identity_access.authorization.resource_policies_configured
    for_each: iam_users
    conditions:
      all:
        - var: item.user_permissions_boundary
          op: exists
        - var: item.attached_policies
          op: exists
  -
    title: "Permission boundaries have unused permissions removed"
    severity: medium
    rule_id: aws.iam.permission_boundaries.unused_permissions_removed
    assertion_id: rbac_entitlements.least_priv.unused_permissions_removed
    for_each: iam_users
    conditions:
      all:
        - var: item.user_permissions_boundary
          op: exists
        - var: item.attached_policies
          op: not_contains
          value: "arn:aws:iam::aws:policy/AdministratorAccess"
  -
    title: "Organization policies have conditional access enabled"
    severity: medium
    rule_id: aws.iam.organization_policies.conditional_access_enabled
    assertion_id: identity_access.authorization.conditional_access_enabled
    for_each: iam_policies
    conditions:
      all:
        - var: item.scp_ids
          op: exists
        - var: item.scp_names
          op: exists
  -
    title: "Organization policies have lifecycle managed"
    severity: medium
    rule_id: aws.iam.organization_policies.lifecycle_managed
    assertion_id: rbac_entitlements.entitlement_mgmt.lifecycle_managed
    for_each: iam_policies
    conditions:
      all:
        - var: item.scp_ids
          op: exists
        - var: item.scp_names
          op: exists
  -
    title: "Organization policies have permission boundaries enforced"
    severity: high
    rule_id: aws.iam.organization_policies.permission_boundaries_enforced
    assertion_id: rbac_entitlements.least_priv.permission_boundaries_enforced
    for_each: iam_policies
    conditions:
      all:
        - var: item.scp_ids
          op: exists
        - var: item.scp_names
          op: exists
  -
    title: "Organization policies have resource policies configured"
    severity: medium
    rule_id: aws.iam.organization_policies.resource_policies_configured
    assertion_id: identity_access.authorization.resource_policies_configured
    for_each: iam_policies
    conditions:
      all:
        - var: item.scp_ids
          op: exists
        - var: item.scp_names
          op: exists
  -
    title: "Organization policies have temporary access controlled"
    severity: medium
    rule_id: aws.iam.organization_policies.temporary_access_controlled
    assertion_id: rbac_entitlements.entitlement_mgmt.temporary_access_controlled
    for_each: iam_policies
    conditions:
      all:
        - var: item.scp_ids
          op: exists
        - var: item.scp_names
          op: exists
  -
    title: "Policy management has policy compliance monitored"
    severity: medium
    rule_id: aws.iam.policy_management.policy_compliance_monitored
    assertion_id: rbac_entitlements.entitlement_mgmt.policy_compliance_monitored
    for_each: iam_policies
    conditions:
      all:
        - var: item.policy_attachment_count
          op: exists
        - var: item.customer_managed_policy_arns
          op: exists
  -
    title: "Policy management has policy exceptions managed"
    severity: medium
    rule_id: aws.iam.policy_management.policy_exceptions_managed
    assertion_id: rbac_entitlements.entitlement_mgmt.policy_exceptions_managed
    for_each: iam_policies
    conditions:
      all:
        - var: item.policy_attachment_count
          op: exists
        - var: item.customer_managed_policy_arns
          op: exists
  -
    title: "Policy management has security policies defined"
    severity: high
    rule_id: aws.iam.policy_management.security_policies_defined
    assertion_id: rbac_entitlements.entitlement_mgmt.security_policies_defined
    for_each: iam_policies
    conditions:
      all:
        - var: item.customer_managed_policy_arns
          op: exists
        - var: item.policy_names
          op: exists
  -
    title: "Session duration has session duration limited"
    severity: medium
    rule_id: aws.iam.session_duration.session_duration_limited
    assertion_id: identity_access.authentication.session_timeout_configured
    for_each: iam_roles
    conditions:
      all:
        - var: item.max_session_duration
          op: exists
        - var: item.max_session_duration
          op: lte
          value: 3600
  -
    title: "Session duration has temporary credentials controlled"
    severity: medium
    rule_id: aws.iam.session_duration.temporary_credentials_controlled
    assertion_id: identity_access.authentication.temporary_credentials_controlled
    for_each: iam_roles
    conditions:
      all:
        - var: item.max_session_duration
          op: exists
        - var: item.max_session_duration
          op: lte
          value: 3600
  -
    title: "MFA has hardware tokens required for privileged users"
    severity: high
    rule_id: aws.iam.mfa.hardware_tokens_required_for_privileged
    assertion_id: identity_access.authentication.strong_authn_enabled
    for_each: iam_users
    conditions:
      all:
        - var: item.attached_policies
          op: contains
          value: "AdministratorAccess"
        - var: item.mfa_devices
          op: length_gte
          value: 1
  -
    title: "Custom policies have least privilege roles"
    severity: high
    rule_id: aws.iam.custom_policies.least_privilege_roles
    assertion_id: rbac_entitlements.least_priv.least_privilege_roles
    for_each: iam_users
    conditions:
      all:
        - var: item.attached_policies
          op: exists
        - var: item.attached_policies
          op: not_contains
          value: "arn:aws:iam::aws:policy/AdministratorAccess"
  -
    title: "Custom policies use service linked roles appropriately"
    severity: medium
    rule_id: aws.iam.custom_policies.service_linked_roles_used
    assertion_id: rbac_entitlements.least_priv.service_linked_roles_used
    for_each: iam_roles
    conditions:
      all:
        - var: item.role_path
          op: contains
          value: "aws-service-role"
        - var: item.role_attached_policies
          op: exists
  -
    title: "Entitlement policies have lifecycle managed"
    severity: medium
    rule_id: aws.iam.entitlement_policies.lifecycle_managed
    assertion_id: rbac_entitlements.entitlement_mgmt.lifecycle_managed
    for_each: iam_users
    conditions:
      all:
        - var: item.attached_policies
          op: exists
        - var: item.attached_policies
          op: length_gte
          value: 0
  -
    title: "Entitlement policies have temporary access controlled"
    severity: medium
    rule_id: aws.iam.entitlement_policies.temporary_access_controlled
    assertion_id: rbac_entitlements.entitlement_mgmt.temporary_access_controlled
    for_each: iam_users
    conditions:
      all:
        - var: item.attached_policies
          op: exists
        - var: item.attached_policies
          op: length_gte
          value: 0
  -
    title: "Role assignments have principals limited"
    severity: high
    rule_id: aws.iam.role_assignments.principals_limited
    assertion_id: rbac_entitlements.least_priv.principals_limited
    for_each: iam_roles
    conditions:
      all:
        - var: item.role_path
          op: exists
        - var: item.role_attached_policies
          op: not_contains
          value: "arn:aws:iam::aws:policy/AdministratorAccess"
  -
    title: "Role assignments have just-in-time access enabled"
    severity: medium
    rule_id: aws.iam.role_assignments.just_in_time_access_enabled
    assertion_id: rbac_entitlements.least_priv.just_in_time_access_enabled
    for_each: iam_roles
    conditions:
      all:
        - var: item.role_last_used
          op: exists
        - var: item.role_attached_policies
          op: exists
  -
    title: "Role definitions use service linked roles appropriately"
    severity: medium
    rule_id: aws.iam.role_definitions.service_linked_roles_used
    assertion_id: rbac_entitlements.least_priv.service_linked_roles_used
    for_each: iam_roles
    conditions:
      all:
        - var: item.role_path
          op: contains
          value: "aws-service-role"
        - var: item.role_attached_policies
          op: exists
  -
    title: "Role permissions have lifecycle managed"
    severity: medium
    rule_id: aws.iam.role_permissions.lifecycle_managed
    assertion_id: rbac_entitlements.entitlement_mgmt.lifecycle_managed
    for_each: iam_roles
    conditions:
      all:
        - var: item.role_attached_policies
          op: exists
        - var: item.role_attached_policies
          op: length_gte
          value: 0
  -
    title: "Role permissions have temporary access controlled"
    severity: medium
    rule_id: aws.iam.role_permissions.temporary_access_controlled
    assertion_id: rbac_entitlements.entitlement_mgmt.temporary_access_controlled
    for_each: iam_roles
    conditions:
      all:
        - var: item.max_session_duration
          op: exists
        - var: item.max_session_duration
          op: lte
          value: 3600
  -
    title: "Role policies have conditional access enabled"
    severity: medium
    rule_id: aws.iam.role_policies.conditional_access_enabled
    assertion_id: identity_access.authorization.conditional_access_enabled
    for_each: iam_roles
    conditions:
      all:
        - var: item.role_attached_policies
          op: exists
        - var: item.role_attached_policies
          op: length_gte
          value: 0
  -
    title: "Role policies have permission boundaries enforced"
    severity: high
    rule_id: aws.iam.role_policies.permission_boundaries_enforced
    assertion_id: rbac_entitlements.least_priv.permission_boundaries_enforced
    for_each: iam_roles
    conditions:
      all:
        - var: item.permissions_boundary_arn
          op: exists
        - var: item.role_attached_policies
          op: exists
  -
    title: "Role policies have resource policies configured"
    severity: medium
    rule_id: aws.iam.role_policies.resource_policies_configured
    assertion_id: identity_access.authorization.resource_policies_configured
    for_each: iam_roles
    conditions:
      all:
        - var: item.role_attached_policies
          op: exists
        - var: item.role_attached_policies
          op: length_gte
          value: 0
  -
    title: "Service linked roles have least privilege enforced"
    severity: high
    rule_id: aws.iam.service_linked_roles.least_privilege_roles
    assertion_id: rbac_entitlements.least_priv.least_privilege_roles
    for_each: iam_roles
    conditions:
      all:
        - var: item.role_path
          op: contains
          value: "aws-service-role"
        - var: item.role_attached_policies
          op: exists
  -
    title: "Service linked roles are used appropriately"
    severity: medium
    rule_id: aws.iam.service_linked_roles.service_linked_roles_used
    assertion_id: rbac_entitlements.least_priv.service_linked_roles_used
    for_each: iam_roles
    conditions:
      all:
        - var: item.role_path
          op: contains
          value: "aws-service-role"
        - var: item.role_attached_policies
          op: exists
  -
    title: "Group memberships have principals limited"
    severity: high
    rule_id: aws.iam.group_memberships.principals_limited
    assertion_id: rbac_entitlements.least_priv.principals_limited
    for_each: iam_groups
    conditions:
      all:
        - var: item.group_attached_policies
          op: exists
        - var: item.group_attached_policies
          op: not_contains
          value: "arn:aws:iam::aws:policy/AdministratorAccess"
  -
    title: "Group memberships have just-in-time access enabled"
    severity: medium
    rule_id: aws.iam.group_memberships.just_in_time_access_enabled
    assertion_id: rbac_entitlements.least_priv.just_in_time_access_enabled
    for_each: iam_groups
    conditions:
      all:
        - var: item.group_attached_policies
          op: exists
        - var: item.group_attached_policies
          op: length_gte
          value: 0
  -
    title: "Resource-based policies have principals limited"
    severity: high
    rule_id: aws.iam.resource_based_policies.principals_limited
    assertion_id: rbac_entitlements.least_priv.principals_limited
    for_each: iam_policies
    conditions:
      all:
        - var: item.customer_managed_policy_arns
          op: exists
        - var: item.policy_names
          op: exists
  -
    title: "Resource-based policies have just-in-time access enabled"
    severity: medium
    rule_id: aws.iam.resource_based_policies.just_in_time_access_enabled
    assertion_id: rbac_entitlements.least_priv.just_in_time_access_enabled
    for_each: iam_policies
    conditions:
      all:
        - var: item.policy_attachment_count
          op: exists
        - var: item.customer_managed_policy_arns
          op: exists
  -
    title: "Crypto policies have algorithm standards enforced"
    severity: high
    rule_id: aws.iam.crypto_policies.algorithm_standards_enforced
    assertion_id: rbac_entitlements.crypto.algorithm_standards_enforced
    for_each: iam_users
    conditions:
      all:
        - var: item.attached_policies
          op: exists
        - var: item.attached_policies
          op: length_gte
          value: 0
  -
    title: "Crypto policies have compliance standards met"
    severity: high
    rule_id: aws.iam.crypto_policies.compliance_standards_met
    assertion_id: rbac_entitlements.crypto.compliance_standards_met
    for_each: iam_users
    conditions:
      all:
        - var: item.attached_policies
          op: exists
        - var: item.attached_policies
          op: length_gte
          value: 0
  -
    title: "EKS service roles have least privilege enforced"
    severity: high
    rule_id: aws.iam.eks_service_roles.least_privilege_enforced
    assertion_id: rbac_entitlements.least_priv.least_privilege_enforced
    for_each: iam_roles
    conditions:
      all:
        - var: item.role_path
          op: contains
          value: "eks"
        - var: item.role_attached_policies
          op: exists
  -
    title: "EKS service roles have service account restrictions"
    severity: medium
    rule_id: aws.iam.eks_service_roles.service_account_restrictions
    assertion_id: rbac_entitlements.least_priv.service_account_restrictions
    for_each: iam_roles
    conditions:
      all:
        - var: item.role_path
          op: contains
          value: "eks"
        - var: item.role_attached_policies
          op: exists