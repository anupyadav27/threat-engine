ec2:
  scope: regional

  discovery:
    - discovery_id: list_security_groups
      calls:
        - action: describe_security_groups
          fields:
            - path: SecurityGroups[].GroupId
              var: GroupId
    - discovery_id: list_instances
      calls:
        - action: describe_instances
          fields:
            - path: Reservations[].Instances[].InstanceId
              var: InstanceId
    - discovery_id: list_volumes
      calls:
        - action: describe_volumes
          fields:
            - path: Volumes[].VolumeId
              var: VolumeId
    - discovery_id: ebs_encryption_by_default
      calls:
        - action: get_ebs_encryption_by_default
          fields:
            - path: EbsEncryptionByDefault
              var: enabled

  checks:
    - check_id: ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_22
      for_each: list_security_groups
      param: GroupIds
      multi_step: true
      logic: AND
      calls:
        - action: describe_security_groups
          fields:
            - path: SecurityGroups[].IpPermissions[].IpRanges[].CidrIp
              operator: contains
              expected: 0.0.0.0/0
            - path: SecurityGroups[].IpPermissions[].FromPort
              operator: contains
              expected: 22

    - check_id: ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_3389
      for_each: list_security_groups
      param: GroupIds
      multi_step: true
      logic: AND
      calls:
        - action: describe_security_groups
          fields:
            - path: SecurityGroups[].IpPermissions[].IpRanges[].CidrIp
              operator: contains
              expected: 0.0.0.0/0
            - path: SecurityGroups[].IpPermissions[].FromPort
              operator: contains
              expected: 3389

    - check_id: ec2_securitygroup_allow_ingress_from_internet_to_all_ports
      for_each: list_security_groups
      param: GroupIds
      multi_step: true
      logic: OR
      calls:
        - action: describe_security_groups
          fields:
            - path: SecurityGroups[].IpPermissions[].IpRanges[].CidrIp
              operator: contains
              expected: 0.0.0.0/0
            - path: SecurityGroups[].IpPermissions[].IpProtocol
              operator: contains
              expected: -1
            - path: SecurityGroups[].IpPermissions[].FromPort
              operator: contains
              expected: 0
            - path: SecurityGroups[].IpPermissions[].ToPort
              operator: contains
              expected: 65535

    - check_id: ec2_instance_imdsv2_enabled
      for_each: list_instances
      param: InstanceIds
      calls:
        - action: describe_instances
          fields:
            - path: Reservations[].Instances[].MetadataOptions.HttpTokens
              operator: equals
              expected: required

    - check_id: ec2_instance_detailed_monitoring_enabled
      for_each: list_instances
      param: InstanceIds
      calls:
        - action: describe_instances
          fields:
            - path: Reservations[].Instances[].Monitoring.State
              operator: equals
              expected: enabled

    - check_id: ec2_ebs_default_encryption_enabled
      for_each: ebs_encryption_by_default
      calls:
        - action: get_ebs_encryption_by_default
          fields:
            - path: EbsEncryptionByDefault
              operator: equals
              expected: true

    - check_id: ec2_ebs_volume_encryption_enabled
      for_each: list_volumes
      param: VolumeIds
      calls:
        - action: describe_volumes
          fields:
            - path: Volumes[].Encrypted
              operator: equals
              expected: true
