# Azure Rule Templates (for azure_compliance_python_engine)
# Replace <placeholders> accordingly. Comments explain supported semantics.

# ------------------------------------------------------------------------------------
# ARM services template (subscription/regional/management_group/global)
# ------------------------------------------------------------------------------------
<service_name>:
  # Scope options: tenant | management_group | subscription | regional | global
  scope: <subscription>

  # Iterate all resource groups when actions require RG context (subscription/regional scopes)
  iterate_resource_groups: <true|false>

  # Discovery: collect resources and bind variables for checks
  discovery:
    - discovery_id: <discovery_id_1>
      # Optional chaining:
      # for_each: <previous_discovery_id>
      # param: <param_name_to_inject_into_action>
      # Scoped params (use if your client action requires them):
      # region_param: <region_param_name>
      # resource_group_param: <resource_group_param_name>
      # management_group_param: <management_group_param_name>
      calls:
        - action: <client_operation>      # e.g., virtual_machines.list, storage_accounts.list_by_resource_group
          # region_param: <...>
          # resource_group_param: <...>
          # management_group_param: <...>
          fields:
            - path: __self__              # capture full resource objects or pages
              var: <item_var>             # e.g., vm, account, nsg
            - path: <property.path>       # supports [] to map
              var: <property_var>
            # Optional mapping (applied post-extract). Empty "" key covers null/empty.
            # map: { "": <default_value>, "old": "new" }

  # Checks: evaluate assertions over discovered items
  checks:
    - check_id: <unique_check_id>
      title: <human_readable_name>
      severity: <low|medium|high|critical>
      for_each: <discovery_id_1>
      param: <param_name>                 # injected when action != self
      logic: <AND|OR>                     # default AND
      multi_step: <true|false>            # when multiple calls; with OR allows any to pass
      calls:
        # Evaluate directly on the resource object
        - action: self
          fields:
            - path: <property.path>
              operator: <equals|not_equals|contains|not_contains|exists>
              expected: <value>

        # Or call another client operation with the item as param
        - action: <client_operation>
          # region_param: <...>
          # resource_group_param: <...>
          # management_group_param: <...>
          fields:
            - path: <property.path>
              operator: <equals|not_equals|contains|not_contains|exists>
              expected: <value>

# ------------------------------------------------------------------------------------
# Tenant (Microsoft Graph) template (Entra ID)
# ------------------------------------------------------------------------------------
<tenant_service_name>:
  scope: tenant

  discovery:
    - discovery_id: <items>
      calls:
        - method: GET
          path: /v1.0/<graph_resource>          # e.g., /v1.0/applications
          fields:
            - path: value[]                      # capture list
              var: <item_var>
            - path: value[].<property>
              var: <property_var>

  checks:
    - check_id: <tenant_check_id>
      title: <description>
      severity: <low|medium|high|critical>
      for_each: <items>
      param: <item_var>
      calls:
        - method: GET
          path: /v1.0/<graph_resource>          # {param} replacement applies to string params
          fields:
            - path: <property.path>
              operator: <equals|not_equals|contains|not_contains|exists>
              expected: <value>

# ------------------------------------------------------------------------------------
# Operator notes supported by the engine:
# - equals / not_equals
# - contains / not_contains (lists or substring on scalars)
# - exists (omit expected)
#
# Special tokens:
# - action: self  → evaluate against the discovered resource object
# - path: __self__ → emit entire object/page (engine iterates SDK pagers)
#
# Scoped params:
# - regional: set scope: regional and pass region via region_param when required by an action
# - subscription/RG: iterate_resource_groups: true and pass resource_group_param for RG-scoped actions
# - management_group: scope: management_group and pass management_group_param when required 